@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Foundation.BlazorExtensions.Components
@using Foundation.BlazorExtensions.Extensions
@using Foundation.BlazorExtensions.Services

@implements IDisposable

@inherits Microsoft.AspNetCore.Components.Layouts.LayoutComponentBase
@inject Foundation.BlazorExtensions.BlazorStateMachine _blazorStateMachine
@inject Foundation.BlazorExtensions.BlazorStateMachineResolver _blazorContext

@inject IUriHelper _uriHelper;
@inject LayoutService _layoutService;
@inject LanguageService _languageService;
@inject InteropService _interopService;



<div id="wrapper">
    <header>
        <BlazorPlaceholder Name="header">
            @Body
        </BlazorPlaceholder>
    </header>
    <main>
        <BlazorPlaceholder Name="main">
            @Body
        </BlazorPlaceholder>
    </main>


    <footer>

        <BlazorPlaceholder Name="footer">
            @Body
        </BlazorPlaceholder>

    </footer>
</div>

@code
{

    [Parameter]
    protected string Language { get; set; }

    [CascadingParameter]
    protected ContextStateProvider ContextStateProvider { get; set; }


    protected override Task OnAfterRenderAsync()
    {

        return ContextStateProvider.SaveChangesAsync();

    }




    protected override void OnInit()
    {
        _uriHelper.OnLocationChanged += OnLocationChanged;

        Reload();
    }



    private void OnLocationChanged(object sender, LocationChangedEventArgs args) => Reload();

    private async void Reload()
    {

        bool hasRouteError = Language.HasRouteError();


        if (hasRouteError)
        {
            Language = _languageService.GetLanguageFromUrl(_uriHelper.GetBaseUri(), Language).TwoLetterCode;
        }

        await _layoutService.LoadRoute(Language, hasRouteError);


        await SetPageTitle();


        StateHasChanged();
    }

    private async Task SetPageTitle()
    {
        string pageTitle = _blazorStateMachine.GetFieldsFromCurrentRoute().PlainText("PageTitle")?.Value?.HtmlDecode();

        if (!string.IsNullOrWhiteSpace(pageTitle))
        {

            // THIS IS FOR BLAZOR-SERVER-SIDE - Can't call javascript before rendering is done
            try
            {
                await _interopService.SetPageTitle(pageTitle);
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
            }


        }
    }

    public void Dispose()
    {
        _uriHelper.OnLocationChanged -= OnLocationChanged;
    }

}

